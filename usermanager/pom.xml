<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.citizant</groupId>
	<artifactId>usermanager</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>usermanager Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<java.version>1.8</java.version>
		<spring.version>3.0.5.RELEASE</spring.version>
		<tomcat.home>C:/devapps/Apache/tomcat7.0</tomcat.home>
		<webdriver.chrome.driver>/devapps/chromedriver.exe</webdriver.chrome.driver>

		<!-- The Cargo container type -->
		<cargo.container.id>tomcat7x</cargo.container.id>
		<!-- The URL of the Zip file based installer for the container that Cargo 
			is to deploy -->
		<cargo.container.url>http://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/7.0.70/tomcat-7.0.70.zip</cargo.container.url>
		<!-- The port used by the forked container -->
		<cargo.container.port>8080</cargo.container.port>
		<!-- When using Tomcat, the AJP connector listen port -->
		<cargo.container.tomcat.ajp.port>8009</cargo.container.tomcat.ajp.port>
		<!-- The RMI port used on the container. For Tomcat, this is the value 
			of the /Server/@port attribute. -->
		<cargo.container.rmi.port>8205</cargo.container.rmi.port>
		<!-- Optional JVM arguments for the forked container that are appended 
			to any debugging configuration set by cargo.container.jvmargs.debug (See 
			cargo-debug profile.) -->
		<cargo.container.jvmargs></cargo.container.jvmargs>
		<!-- The port to use when the debugger is enabled. -->
		<cargo.container.debug.port>8000</cargo.container.debug.port>
		<!-- The suspend setting to use when the debugger is enabled. -->
		<cargo.container.debug.suspend>n</cargo.container.debug.suspend>
		<!-- The debug arguments used to enable debugging on the forked JVM. -->
		<cargo.container.debug.jvmargs>-Xdebug
			-Xrunjdwp:transport=dt_socket,server=y,suspend=${cargo.container.debug.suspend},address=${cargo.container.debug.port}
			-Xnoagent -Djava.compiler=NONE</cargo.container.debug.jvmargs>
		<cargo.container.jvmargs.debug></cargo.container.jvmargs.debug>

		<cargo.deployable.default.groupId>${project.groupId}</cargo.deployable.default.groupId>
		<cargo.deployable.default.artifactId>${project.artifactId}</cargo.deployable.default.artifactId>
		<cargo.deployable.default.context>${project.artifactId}</cargo.deployable.default.context>

	</properties>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.8.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.8.5</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<!-- Selenium Test -->

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.53.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-htmlunit-driver -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-htmlunit-driver</artifactId>
			<version>2.52.0</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-remote-driver</artifactId>
			<version>3.0.1</version>
		</dependency>

	</dependencies>
	<build>
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.16</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.6.4</version>
					<configuration>
						<configuration>
							<properties>
								<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
							</properties>
						</configuration>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.2</version> <!-- or whatever current version -->
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<skipTests>${skip.surefire.tests}</skipTests>
					<argLine>${surefireArgLine}</argLine>
					<systemPropertyVariables>
						<webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
					</systemPropertyVariables>
					<!-- run only the tests that talk to the remote test site -->
					<excludes>
						<exclude>**/HomePageRecordedTest.java</exclude>
						<exclude>**/HomePageTest.java</exclude>
						<exclude>**/UserServiceTest.java</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>test</id>
						<goals>
							<goal>test</goal>
						</goals>
						<phase>test</phase>
						<configuration>

						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>tomcat7Create</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>perform-it</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<systemPropertyVariables>
										<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
										<webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
									</systemPropertyVariables>
									<!-- run all the tests that talk to our test app -->
									<includes>**/*Test.java</includes>
									<excludes>
										<exclude>**/PassionTeaTest.java</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container.id}</containerId>
								<systemProperties>
									<log4j.config>${project.build.directory}/test-classes/log4j.xml
									</log4j.config>
								</systemProperties>
								<dependencies>
								</dependencies>
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
								</zipUrlInstaller>
								<output>${project.build.directory}/tomcat7/container.log</output>
								<append>false</append>
								<log>${project.build.directory}/tomcat7/cargo.log</log>
							</container>
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<type>war</type>
									<properties>
										<context>${project.artifactId}</context>
									</properties>
									<pingURL>http://localhost:${cargo.container.port}/usermanager
									</pingURL>
									<pingTimeout>200000</pingTimeout>
								</deployable>
							</deployables>
							<configuration>
								<type>standalone</type>
								<properties>
									<!-- update with whatever your remote server info is -->
									<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
									<cargo.logging>low</cargo.logging>
									<cargo.jvmargs>-Xmx1024m -Xms1024m</cargo.jvmargs>
								</properties>
							</configuration>
						</configuration>
						<executions>
							<execution>
								<id>start-cargo</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<configuration>
										<properties>
											<cargo.jvmargs>
												${cargo.container.jvmargs.debug}
												${cargo.container.jvmargs}
											</cargo.jvmargs>
											<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
											<cargo.tomcat.ajp.port>${cargo.container.tomcat.ajp.port}</cargo.tomcat.ajp.port>
											<cargo.rmi.port>${cargo.container.rmi.port}</cargo.rmi.port>
										</properties>
									</configuration>
								</configuration>
							</execution>
							<execution>
								<id>stop-cargo</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>tomcat7Deploy</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>perform-it</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<systemPropertyVariables>
										<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
										<webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
									</systemPropertyVariables>
									<includes>**/*Test.java</includes>
									<excludes>
										<exclude>**/PassionTeaTest.java</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container.id}</containerId>
								<type>remote</type>
								<systemProperties>
									<log4j.config>${project.build.directory}/test-classes/log4j.xml
									</log4j.config>
								</systemProperties>
								<dependencies>
								</dependencies>
								<!-- Instead of downloading the container or deploying remote, you 
									can also reuse an existing installation by settings its directory: <home>${tomcat.home}</home> -->
								<output>${tomcat.home}/container.log</output>
								<append>false</append>
								<log>${tomcat.home}/cargo.log</log>
							</container>
							<configuration>
								<type>runtime</type>
								<properties>
									<!-- update with whatever your remote server info is -->
									<cargo.tomcat.manager.url>http://localhost:8080/manager</cargo.tomcat.manager.url>
									<cargo.remote.username>admin</cargo.remote.username>
									<cargo.remote.password>admin</cargo.remote.password>
									<cargo.servlet.port>${cargo.container.port}</cargo.servlet.port>
									<cargo.logging>low</cargo.logging>
									<cargo.jvmargs>-Xmx1024m -Xms1024m</cargo.jvmargs>
								</properties>
							</configuration>
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<type>war</type>
									<properties>
										<context>${project.artifactId}</context>
									</properties>
									<pingURL>http://localhost:${cargo.container.port}/usermanager
									</pingURL>
									<pingTimeout>200000</pingTimeout>
								</deployable>
							</deployables>
						</configuration>
						<executions>
							<execution>
								<id>deploy-cargo</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>deploy</goal>
								</goals>
							</execution>
							<execution>
								<id>undeploy-cargo</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>undeploy</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>nodejs</id>
			<build>
				<plugins>
					<plugin>
						<groupId>pl.allegro</groupId>
						<artifactId>grunt-maven-plugin</artifactId>
						<version>1.4.1</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>npm</goal>
									<goal>grunt</goal>
								</goals>

							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.7.9</version>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent which 
								is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
									<!-- Sets the name of the property containing the settings for JaCoCo 
										runtime agent. -->
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
							<!-- Ensures that the code coverage report for unit tests is created 
								after unit tests have been run. -->
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.3</version>
				<configuration>
					<!-- Reports all bugs (other values are medium and max) -->
					<threshold>Low</threshold>
					<!-- Produces XML report -->
					<xmlOutput>true</xmlOutput>
					<xmlOutput>true</xmlOutput>
					<!-- Optional directory to put findbugs xdoc xml report -->
					<xmlOutputDirectory>target/site</xmlOutputDirectory>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
